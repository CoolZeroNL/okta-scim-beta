# This is a file written in Emacs and authored using org-mode (http://orgmode.org/)
# The "README.md" file is generated from this file by running the
# "M-x org-md-export-to-markdown" command from inside of Emacs.
# 
# The rest of the files are generated from this file by running the
# "M-x org-babel-tangle" command from inside of Emacs.
# 
# The options below control the behavior of org-md-export-to-markdown:
#
# Don't render a Table of Contents 
#+OPTIONS: toc:nil
# Don't render section numbers
#+OPTIONS: num:nil
# Turn of subscript parsing: http://super-user.org/wordpress/2012/02/02/how-to-get-rid-of-subscript-annoyance-in-org-mode/comment-page-1/
#+OPTIONS: ^:{}
* Welcome to the Okta SCIM Beta
  Thank you for your interest in the Okta SCIM beta.

  If you haven't heard of SCIM before, here is a good summary from the
  [[https://en.wikipedia.org/wiki/System_for_Cross-domain_Identity_Management][Wikipedia article on SCIM]]:
  #+BEGIN_QUOTE
  System for Cross-domain Identity Management (SCIM) is an open
  standard for automating the exchange of user identity information
  between identity domains, or IT systems.
  #+END_QUOTE

  If you are a developer for a cloud application, Okta allows you
  to receive user provisioning and profile update message from Okta
  using the open SCIM standard.
* Getting into the Okta SCIM Beta
  Before building your SCIM Server, please apply for admission into
  the Okta SCIM Beta by sending an email to [[mailto:developers@okta.com][developers@okta.com]] with
  details on customer demand and urgency (e.g. # of joint customers
  that would benefit, deployment deadlines). 

  Once admitted, please provide the following starter info about your
  SCIM Server to get a generic SCIM template application added to your
  Okta Developer Edition org:

  1. The =oktapreview.com= Okta org that you will use to develop your
     SCIM integration. (If you don't have an Okta org, create an
     [[https://www.okta.com/developer/signup/][Okta Developer Edition]] org.)
  2. The Base URL to which Okta will send SCIM requests to your
     service.
  3. The Authentication method that Okta will use to authenticate with
     your service.
  4. Details on the Base URL and Authentication method are covered
     below.

  Once the SCIM template app is in your Okta org, you can start
  testing on your SCIM integration directly with Okta.
* Understanding of User Provisioning in Okta
  Okta is a universal directory with the main focus in storing
  identity related information.  Users can be created in Okta directly
  as local users or imported from external systems like Active
  Directory or a [[https://en.wikipedia.org/wiki/Category:Human_resource_management_software][Human Resource Management Software]] system.

  An Okta user schema contains many different user attributes,
  but always contains a user name, first name, last name, and
  email address. This schema can be extended.

  Okta user attributes can be mapped from a source into Okta and can
  be mapped from Okta to a target.

  Below are the main operations in Okta's SCIM user provisioning lifecycle:
  1) Create a user account.
  2) Read a list of accounts, with support for searching for a preexisting account.
  3) Update an account (user profile changes, entitlement changes, etc).
  4) Deactivate an account.

  In Okta, an application instance is a connector that provides Single Sign-On
  and provisioning functionality with the target application.

* Required SCIM Capabilities
  Okta supports provisioning to both SCIM 1.1 and SCIM 2.0 APIs.

  If you haven't implemented SCIM, Okta recommends that you implement
  SCIM 2.0.

  Okta implements SCIM 2.0 as described in RFCs [[https://tools.ietf.org/html/rfc7642][7642]], [[https://tools.ietf.org/html/rfc7643][7643]], [[https://tools.ietf.org/html/rfc7644][7644]].

  If you are writing a SCIM implementation for the first time, an
  important part of the planning process is determining which of
  Okta's provisioning features your SCIM API can or should support and
  which features you do not need to support.

  Specifically, you do not need to implement the SCIM 2.0
  specification fully to work with Okta. At a minimum, Okta requires that
  your SCIM 2.0 API implement the features described below:
** Base URL
   The API endpoint for your SCIM API *MUST* be secured via [[https://tools.ietf.org/html/rfc5246][TLS]]
   (=https://=), Okta /does not/ connect to unsecured API endpoints.

   You can choose any Base URL for your API endpoint. If you
   are implementing a brand new SCIM API, we suggest using =/scim/v2=
   as your Base URL; for example: =https://example.com/scim/v2= -
   however, you must support the URL structure described in the
   [[https://tools.ietf.org/html/rfc7644#section-3.2]["SCIM Endpoints and HTTP Methods" section of RFC7644]].
** Authentication
   Your SCIM API *MUST* be secured against anonymous access. At the
   moment, Okta supports authentication against SCIM APIs with one of
   the following methods:

   1. [[http://oauth.net/2/][OAuth 2.0]]
   2. [[https://en.wikipedia.org/wiki/Basic_access_authentication][Basic Authentication]]
   3. Custom HTTP Header
** Basic User Schema
   Your service must be capable of storing the following four user
   attributes:

   1. User ID (=userName=)
   2. First Name (=name.givenName=)
   3. Last Name (=name.familyName=)
   4. Email (=emails=)

   Note that Okta supports more than the four user attributes listed
   above. However, these four attributes are the base attributes that
   you must support.  The full user schema for SCIM 2.0 is described
   in [[https://tools.ietf.org/html/rfc7643#section-4][section 4 of RFC 7643]].

   #+BEGIN_QUOTE
   *Best Practice:* Keep your User ID distinct from the User Email
   Address. Many systems use an email address as a user identifier,
   but this is not recommended, as email addresses often change. Using
   a unique User ID to identify user resources prevents future
   complications.
   #+END_QUOTE

   If your service supports user attributes beyond those four base
   attributes, add support for those additional
   attributes to your SCIM API. In some cases, you might need to
   configure Okta to map non-standard user attributes into the user
   profile for your application.

   Included in this git repository is a sample application written in
   Python/Flask, this sample application implements SCIM 2.0. Below is
   how this sample application defines these attributes:
   #+NAME: user-db-model-user-attributes
   #+BEGIN_SRC python
    userName = db.Column(db.String(250),
                         unique=True,
                         nullable=False,
                         index=True)
    familyName = db.Column(db.String(250))
    middleName = db.Column(db.String(250))
    givenName = db.Column(db.String(250))
   #+END_SRC

   In addition to the basic user schema user attributes described
   above, your SCIM API must also have a unique identifier for each
   user resource and should also support marking resources as "active"
   or "inactive."

   In the SCIM specification, the =id= attribute is used to uniquely
   identify resources. [[Https://tools.ietf.org/html/rfc7643#section-3.1][Section 3.1]] of [[https://tools.ietf.org/html/rfc7643][RFC 7643]] provides more details
   on the =id= attribute:

   #+BEGIN_QUOTE
   A unique identifier for a SCIM resource as defined by the service
   provider.  Each representation of the resource MUST include a
   non-empty "id" value.  This identifier MUST be unique across the
   SCIM service provider's entire set of resources.  It MUST be a
   stable, non-reassignable identifier that does not change when the
   same resource is returned in subsequent requests.  The value of
   the "id" attribute is always issued by the service provider and
   MUST NOT be specified by the client.  The string "bulkId" is a
   reserved keyword and MUST NOT be used within any unique identifier
   value.  The attribute characteristics are "caseExact" as "true", a
   mutability of "readOnly", and a "returned" characteristic of
   "always".
   #+END_QUOTE

   Our sample application defines =id= as a monotonically
   increasing integer:
   #+NAME: user-db-model-id-attribute
   #+BEGIN_SRC python
     id = db.Column(db.Integer, primary_key=True)
   #+END_SRC

   *Note:* Your SCIM API can use anything as an =id=, provided that the =id=
   uniquely identifies reach resource, as described in [[https://tools.ietf.org/html/rfc7643#section-3.1][section 3.1]] of
   [[https://tools.ietf.org/html/rfc7643][RFC 7643]].

   Finally, your SCIM API must also support marking a resource as
   "active" or "inactive."

   In our sample application, each user resource has a Boolean
   "active" attribute which is used to mark a user resource as
   "active" or "inactive":

   #+NAME: user-db-model-active-attribute
   #+BEGIN_SRC python
    active = db.Column(db.Boolean, default=False)
   #+END_SRC
** Functionality
   Below are a list of the SCIM API endpoints that your SCIM API must
   support to work with Okta.
** Create Account: POST /Users
   Your SCIM 2.0 API should allow the creation of a new user
   account.  The four basic attributes listed above must be supported, along
   with any additional attributes that your application supports.  If your
   application supports entitlements, your SCIM 2.0 API should allow
   configuration of those as well.
   
   An HTTP POST to the =/Users= endpoint must return an immutable or 
   system ID of the user (=id=) must be returned to Okta.

   Okta will call this SCIM API endpoint under the following circumstances:
   - *Direct assignment*

     When a user is assigned to an Okta application using the "Assign
     to People" button in the "People" tab.
   - *Group-based assignment*

     When a user is added to a group that is assigned to an Okta
     application. For example, an Okta administrator can assign a
     group of users to an Okta application using the "Assign to
     Groups" button in the "Groups" tab. When a group is assigned to an
     Okta application, Okta sends updates to the assigned
     application when a user is added or removed from that group.

   Below is an example demonstrating how the sample application handles account
   creation:

    #+NAME: users_post
    #+BEGIN_SRC python
      @app.route("/scim/v2/Users", methods=['POST'])
      def users_post():
          user_resource = request.get_json()
          user = User(user_resource)
          db.session.add(user)
          db.session.commit()
          rv = user.to_scim_resource()
          send_to_browser(rv)
          resp = flask.jsonify(rv)
          resp.headers['Location'] = url_for('user_get',
                                             user_id=user.userName,
                                             _external=True)
          return resp, 201
    #+END_SRC

   For more information on user creation via the =/Users= SCIM
   endpoint, see [[https://tools.ietf.org/html/rfc7644#section-3.3][section 3.3]] of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].

** Read list of accounts with search: GET /Users
   Your SCIM 2.0 API must support the ability for Okta to retrieve
   users (and entitlements like groups if available) from your
   service.  This allows Okta to fetch all user resources in an
   efficient manner for reconciliation and initial bootstrap (to
   get all users from your app into the system).

   Below is how the sample application handles listing user resources,
   with support for filtering and pagination:

   #+NAME: users_get
   #+BEGIN_SRC python :noweb yes
     @app.route("/scim/v2/Users", methods=['GET'])
     def users_get():
         query = User.query
         <<users_get_filter>>
         <<users_get_pagination>>
         total_results = query.count()
         found = query.all()
         rv = ListResponse(found,
                           start_index=start_index,
                           count=count,
                           total_results=total_results)
         return flask.jsonify(rv.to_scim_resource())
   #+END_SRC

   #+RESULTS: users_get

   #+BEGIN_QUOTE
   If you want to see the SQL query that SQLAlchemy is using for
   the query, add this code after the =query= statement that you want
   to see: =print(str(query.statement))=
   #+END_QUOTE

   For more details on the =/Users= SCIM endpoint, see [[https://tools.ietf.org/html/rfc7644#section-3.4.2][section 3.4.2]]
   of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].
** Read Account Details: GET /Users/{id}
   Your SCIM 2.0 API must support fetching of users by user id.

   Below is how the sample application handles returning a user resource
   by user id:

   #+NAME: user_get
   #+BEGIN_SRC python
     @app.route("/scim/v2/Users/<user_id>", methods=['GET'])
     def user_get(user_id):
	 user = User.query.filter_by(id=user_id).one()
	 return render_json(user)
   #+END_SRC

   For more details on the =/Users/{id}= SCIM endpoint, see [[https://tools.ietf.org/html/rfc7644#section-3.4.1][section 3.4.1]]
   of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].

** Update Account Details: PUT /Users/{id}
   When a profile attribute of a user assigned to your SCIM enabled
   application is changed, Okta will do the following:
   - Make a GET request against =/Users/{id}= on your SCIM API for the
     user to update.
   - Take the resource returned from your SCIM API and update only the
     attributes that need to be updated.
   - Make a PUT request against =/Users/{id}= in your SCIM API with
     the updated resource as the payload.

   Examples of things that can cause changes to an Okta user profile
   are:
   - A change in profile a master like Active Directory or a Human Resource
     Management Software system.
   - A direct change of a profile attribute in Okta for a local user.

   Below is how the sample application handles account profile updates:
   #+NAME: users_put
   #+BEGIN_SRC python
     @app.route("/scim/v2/Users/<user_id>", methods=['PUT'])
     def users_put(user_id):
	 user_resource = request.get_json()
	 user = User.query.filter_by(id=user_id).one()
	 user.update(user_resource)
	 db.session.add(user)
	 db.session.commit()
	 return render_json(user)
   #+END_SRC

   For more details on updates to the =/Users/{id}= SCIM endpoint, see [[https://tools.ietf.org/html/rfc7644#section-3.5.1][section 3.5.1]]
   of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].
** Deactivate Account: PATCH /Users/{id}
   Deprovisioning is perhaps the most important reason customers why
   customers ask that your application supports provisioning
   with Okta. Your SCIM API should support account deactivation via a
   PATCH to =/Users/{id}= where the payload of the PATCH request sets
   the =active= property of the user to =false=.

   Your SCIM API should allow account updates at the attribute level.
   If entitlements are supported, your SCIM API should also be able
   to update entitlements based on SCIM profile updates.

   Okta will send a PATCH request to your application to deactivate a
   user when an Okta user is "unassigned" from your
   application. Examples of when this happen are as follows:
   - A user is manually unassigned from your application.
   - A user is removed from a group which is assigned to your application.
   - When a user is deactivated in Okta, either manually or via 
     by an external profile master like Active Directory or a Human
     Resource Management Software system.

   Below is how the sample application handles account deactivation:
   #+NAME: user_patch
   #+BEGIN_SRC python
     @app.route("/scim/v2/Users/<user_id>", methods=['PATCH'])
     def users_patch(user_id):
	 patch_resource = request.get_json()
	 for attribute in ['schemas', 'Operations']:
	     if attribute not in patch_resource:
		 message = "Payload must contain '{}' attribute.".format(attribute)
		 return message, 400
	 schema_patchop = 'urn:ietf:params:scim:api:messages:2.0:PatchOp'
	 if schema_patchop not in patch_resource['schemas']:
	     return "The 'schemas' type in this request is not supported.", 501
	 user = User.query.filter_by(id=user_id).one()
	 for operation in patch_resource['Operations']:
	     if 'op' not in operation and operation['op'] != 'replace':
		 continue
	     value = operation['value']
	     for key in value.keys():
		 setattr(user, key, value[key])
	 db.session.add(user)
	 db.session.commit()
	 return render_json(user)
   #+END_SRC
   For more details on user attribute updates to =/Users/{id}= SCIM endpoint, see [[https://tools.ietf.org/html/rfc7644#section-3.5.2][section 3.5.2]]
   of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].
** Filtering on =id=, =externalId=, =userName=, and =emails=
   Being able to filter results by the =id=, =externalId=, or =userName=
   attributes is a critical part of working with Okta. 

   Your SCIM API must be able to filter users by =userName= and should
   also support filtering by =id= and =externalId=. Filtering support
   is required because most provisioning actions require the ability
   for Okta to determine if a user resource exists on your system.

   Consider the scenario where an Okta customer with thousands of
   users has a provisioning integration with your system, which also
   has thousands of users. When an Okta customer adds a new user to
   their Okta organization, Okta needs a way to determine quickly if a
   resource for the newly created user was previously created on your
   system.

   Examples of filters that Okta might send to your SCIM API are as
   follows:
   #+BEGIN_QUOTE
   userName eq "jane@example.com"
   #+END_QUOTE

   #+BEGIN_QUOTE
   emails eq "jane@example.com"
   #+END_QUOTE
   
   #+BEGIN_QUOTE
   externalId eq "00u1abcdefGHIJKLMNOP"
   #+END_QUOTE

   Note: The sample application included in this project does not yet
   demonstrate how to implement storing and filtering by
   =externalId=. However, Okta strongly recommends that your SCIM
   implementation supports storing and filtering by =externalId=. For
   details on supporting =externalId=, see
   [[https://tools.ietf.org/html/rfc7643#section-3.1][section 3.1]] of [[https://tools.ietf.org/html/rfc7643][RFC 7643]].
   
   
   At the moment, Okta only supports the =eq= filter operator. However, the
   [[https://tools.ietf.org/html/rfc7644#section-3.4.2.2][filtering capabilities]] described in the SCIM 2.0 Protocol Specification are
   much more complicated.

   Here is an example of how to implement SCIM filtering in Python:
   #+NAME: users_get_filter
   #+BEGIN_SRC python
     request_filter = request.args.get('filter')
     match = None
     if request_filter:
         match = re.match('(\w+) eq "([^"]*)"', request_filter)
     if match:
         (search_key_name, search_value) = match.groups()
         search_key = getattr(User, search_key_name)
         query = query.filter(search_key == search_value)
   #+END_SRC

   Note: The sample code above only supports the =eq= operator. We
   recommend that you add support for all of the filter operators
   described in [[https://tools.ietf.org/html/rfc7644#page-18][table 3]] of the SCIM 2.0 Protocol Specification.

   For more details on filtering in SCIM 2.0, see [[https://tools.ietf.org/html/rfc7644#section-3.4.2.2][section 3.4.2.2]]
   of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].
*** Make this better by turning the request into a =text()= query  :noexport:
    See ABNF here: https://tools.ietf.org/html/rfc7644#page-21
    (My "string" regex above is bad)

    http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.text

    Something like this:
    #+BEGIN_EXAMPLE
	 m = re.match('(\w+) (\w{2}) "([^"]*)"', request_filter)
	 (search_key_name, search_compare, search_value) = m.groups()
         session.query(User).filter(text(":search_key :search_compare :search_value")).all()
    #+END_EXAMPLE
** Resource Paging
   When returning large lists of resources, your SCIM implementation
   must support pagination using a /limit/ (=count=) and /offset/
   (=startIndex=) to return smaller groups of resources in a request.

   Below is an example of a =curl= command that makes a request to the
   =/Users/= SCIM endpoint with =count= and =startIndex= set:

   #+BEGIN_EXAMPLE
     $ curl 'https://scim-server.example.com/scim/v2/Users?count=1&startIndex=1'
     {
       "Resources": [
         {
           "active": false, 
           "id": 1, 
           "meta": {
             "location": "http://scim-server.example.com/scim/v2/Users/1", 
             "resourceType": "User"
           }, 
           "name": {
             "familyName": "Doe", 
             "givenName": "Jane", 
             "middleName": null
           }, 
           "schemas": [
             "urn:ietf:params:scim:schemas:core:2.0:User"
           ], 
           "userName": "jane.doe@example.com"
         }
       ], 
       "itemsPerPage": 1, 
       "schemas": [
         "urn:ietf:params:scim:api:messages:2.0:ListResponse"
       ], 
       "startIndex": 0, 
       "totalResults": 1
     }
   #+END_EXAMPLE

   And here is how the sample application handles pagination with SQLAlchemy:

   #+NAME: users_get_pagination
   #+BEGIN_SRC python
     count = int(request.args.get('count', 100))
     start_index = int(request.args.get('startIndex', 1))
     if start_index < 1:
         start_index = 1
     start_index -= 1
     query = query.offset(start_index).limit(count)
   #+END_SRC
   
   Note: This code subtracts "1" from the
   =startIndex=, because =startIndex= is [[https://tools.ietf.org/html/rfc7644#section-3.4.2][1-indexed]] and
   the OFFSET statement is [[http://www.postgresql.org/docs/8.0/static/queries-limit.html][0-indexed]].

   For more details pagination on a SCIM 2.0 endpoint, see [[https://tools.ietf.org/html/rfc7644#section-3.4.2.4][section 3.4.2.4]]
   of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].
** Rate Limiting
   Some customer actions, such as adding hundreds of users at once,
   causes large bursts of HTTP requests to your SCIM API. For
   scenarios like this, we suggest that your SCIM API return rate
   limiting information to Okta via the [[https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429][HTTP 429 Too Many Requests]]
   status code. This helps Okta throttle the rate at which SCIM
   requests are made to your API.

   For more details on rate limiting requests using the HTTP 429
   status code, see [[https://tools.ietf.org/html/rfc6585#section-4][section 4]] of [[https://tools.ietf.org/html/rfc6585][RFC 6585]].
** SCIM Features Not Implemented by Okta
   The following features are currently not supported by Okta:
*** DELETE /Users/{id}
    Deleting users via DELETE is covered in
    [[https://tools.ietf.org/html/rfc7644#section-3.6][section 3.6]] of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].

    Okta users are never *deleted*; they are *deactivated*
    instead. Because of this, Okta never makes an HTTP DELETE
    request to a user resource on your SCIM API. Instead, Okta makes
    an HTTP PATCH request to set the =active= setting to =false=.
*** Querying with POST
    The ability to query users with a POST request is described in
    [[https://tools.ietf.org/html/rfc7644#section-3.4.3][section 3.4.3]] of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].

    Querying using POST is sometimes useful if your query contains 
    [[https://en.wikipedia.org/wiki/Personally_identifiable_information][personally identifiable information]] that would be exposed in
    system logs if used query parameters with a GET request.

    Okta currently does not support this feature.
*** Bulk Operations
    The ability to send a large collection of resource operations in a
    single request is covered in
    [[https://tools.ietf.org/html/rfc7644#section-3.7][section 3.7]] of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].

    Okta currently does not support this feature and makes
    one request per resource operation.
*** "/Me" Authenticated Subject Alias
    The =/Me= URI alias for the current authenticated subject is
    covered in
    [[https://tools.ietf.org/html/rfc7644#section-3.11][section 3.11]] of the [[https://tools.ietf.org/html/rfc7644][SCIM 2.0 Protocol Specification]].

    Okta does not currently make SCIM requests with the =/Me= URI alias.
*** /Groups API endpoint
    Okta currently does not support using the =/Groups= endpoint of a SCIM
    API. When support is added for the =/Groups= endpoint, Okta plans
    on using the following HTTP requests against the =/Groups= endpoint:
**** Read list of Groups: GET /Groups
**** Create Group: POST /Groups
**** Read Group detail: GET /Groups/{id}
**** Delete Group: DELETE /Groups/{id}
*** /Schemas API endpoint
    Okta does not currently make queries against the =/Schemas=
    endpoint, but this functionality is being planned.

    Here is the specification for the =/Schemas= endpoint, from
    [[https://tools.ietf.org/html/rfc7644#section-4][section 4]] of [[https://tools.ietf.org/html/rfc7644][RFC 7644]]:
    #+BEGIN_QUOTE
      An HTTP GET to this endpoint is used to retrieve information about
      resource schemas supported by a SCIM service provider.  An HTTP
      GET to the endpoint "/Schemas" SHALL return all supported schemas
      in ListResponse format (see Figure 3).  Individual schema
      definitions can be returned by appending the schema URI to the
      /Schemas endpoint.  For example:

            /Schemas/urn:ietf:params:scim:schemas:core:2.0:User

      The contents of each schema returned are described in Section 7 of
      RFC7643.  An example representation of SCIM schemas may be found
      in Section 8.7 of RFC7643.
    #+END_QUOTE
*** /ServiceProviderConfig API endpoint
    Okta does not currently make queries against the =/ServiceProviderConfig=
    endpoint, but this functionality is being planned.

    Here is the specification for the =/ServiceProviderConfig= endpoint, from
    [[https://tools.ietf.org/html/rfc7644#section-4][section 4]] of [[https://tools.ietf.org/html/rfc7644][RFC 7644]]:
    #+BEGIN_QUOTE
      An HTTP GET to this endpoint will return a JSON structure that
      describes the SCIM specification features available on a service
      provider.  This endpoint SHALL return responses with a JSON object
      using a "schemas" attribute of
      "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig".
      The attributes returned in the JSON object are defined in
      Section 5 of RFC7643.  An example representation of SCIM service
      provider configuration may be found in Section 8.5 of RFC7643.
    #+END_QUOTE
*** Filtering on =metadata.lastModified=
    Okta does not currently make queries for resources using
    =lastModified= as part of a filter expression.

    Okta plans to add functionality to fetch incremental updates
    from SCIM APIs by querying for resources using a filter expression
    that requests resources which were updated since the last update.
* Submitting to Okta
  Once you have SCIM provisioning working in your Okta application,
  the last thing to do before submitting your
  application to Okta is the following:
  1. Check the Profile Attributes for your application.
  2. Check the Attribute Mappings for your application.
** Check the Profile Attributes for Your Application
   Before submitting your application to Okta, you should check the
   User Attributes to make sure that the attributes are set to what
   you would want your users to see.

   Check your Profile Attributes as follows:

   - From the "Admin" section in Okta, open the settings page for your
     application.
   - In the "Provisioning" tab, scroll to the bottom and click the
     "Edit Attributes" button in the "User Attributes" section.
   - A "Profile Editor" screen will open, check the following settings:
     - The "Display name" for the application
     - The "Description"
     - In the "Attributes" section, remove all attributes that are not
       supported by your application.

       This is an important step! Your users will get confused if your
       application appears to support attributes that are not
       supported by your SCIM API.

       You can delete an attribute by selecting an attribute, then
       clicking the "Delete" button located in right hand attribute details pane.
     - After you've removed all unsupported attributes from the
       "Attributes" section, check through the remaining
       attributes. In particular, check that the following properties
       for each attribute are what you expect them to be:
       - Display name
       - Variable name
       - External name
       - External namespace
       - Data type
       - Attribute required
	 Only mark an attribute as required if one of the following is
         true:
	 1. The attribute *must* be set for your provisioning
            integration to work.
	 2. An Okta administrator must populate a value for
            this attribute. 
       - Scope
     - If the settings for any of your supported user attributes are
       incorrect, contact Okta and request the correction for your
       attribute.

     Click the blue "Back to profiles" link when you are done checking
     the Profile Attributes for your application.
** Check the Attribute Mappings for Your Application
   The last step for you to complete before submitting your
   application to Okta is to check the User Profile Mappings for your
   application. These mappings are what determine how profile
   attributes are mapped to and from your application to an Okta
   user's Universal Directory profile.

   To check the User Profile Mappings for your application, do the
   following:
   - From the "Admin" section in Okta, open the settings page for your
     application.
   - In the "Provisioning" tab, scroll to the bottom and click the
     "Edit Mappings" button in the "Attribute Mappings" section.
   - Check that each mapping is what you would expect it to be. Be
     sure to check both of the followign:
     1. From your application to Okta.
     2. From Okta to your application.
** Contact Okta
   After you've finished verifying that your SCIM API works with Okta,
   it is time to submit your application to Okta.

   Work with your contact at Okta to start your submission.

   If you have any questions about this document, or how to work with
   SCIM, send an email to [[mailto:developers@okta.com][developers@okta.com]].

* Appendix: Details on the example SCIM server
  Included in this git repository is an example SCIM server written in
  Python. 

  This example SCIM server demonstrates how to implement a basic SCIM
  server that can create, read, update, and deactivate Okta users.

  The "Required SCIM Capabilities" section has the sample code that
  handles the HTTP requests to this sample application, below we
  describe the rest of code used in the example.
** How to run
   Here is how to run the example code on your machine:

   First, start by doing a =git checkout= of this repository, then
   =cd= to directory that =git= creates. Then, do the following:

   1. Create an isolated Python environment named "venv" using [[http://docs.python-guide.org/en/latest/dev/virtualenvs/][virtualenv]]:
      #+BEGIN_EXAMPLE
      $ virtualenv venv
      #+END_EXAMPLE
   2. Next, activate the newly created virtualenv:
      #+BEGIN_EXAMPLE
      $ source venv/bin/activate
      #+END_EXAMPLE
   3. Then, install the dependencies for the sample SCIM server using
      Python's [[https://en.wikipedia.org/wiki/Pip_%28package_manager%29]["pip" package manager]]:
      #+BEGIN_EXAMPLE
      $ pip install -r requirements.txt 
      #+END_EXAMPLE
   4. Finally, start the example SCIM server using this command:
      #+BEGIN_EXAMPLE
      $ python scim-server.py
      #+END_EXAMPLE

** Introduction
   Below are instructions for writing a SCIM server in Python, using
   Flask and SQLAlchemy.

   A completed version of this example server is available in this git
   repository in the file named =scim-server.py=.

** Imports
   We start by importing the Python packages that the SCIM server will
   use:
   #+NAME: imports
   #+BEGIN_SRC python
     import re

     from flask import Flask
     from flask import render_template
     from flask import request
     from flask import url_for
     from flask_socketio import SocketIO
     from flask_socketio import emit
     from flask_sqlalchemy import SQLAlchemy
     import flask
   #+END_SRC

** Setup
   =re= adds support for regular expression parsing, =flask= adds the Flask
   web framework, =flask_socketio= and =flask_sqlalchemy= add a idiomatic support for
   their respective technologies to Flask.

   Next we initialize Flask, SQLAlchemy, and SocketIO:
   #+NAME: setup
   #+BEGIN_SRC python
     app = Flask(__name__)
     app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test-users.db'
     db = SQLAlchemy(app)
     socketio = SocketIO(app)
   #+END_SRC

** SQLAlchemy support for the "users" table:

   Below is the class that SQLAlchemy uses to give us easy access to
   the "users" table.

   The =update= method is used to "merge" or "update" a new User object
   into an existing User object. This is used to simplify the code for
   the code that handles PUT calls to =/Users/{id}=.

   The =to_scim_resource= method is used to turn a User object into
   a [[https://tools.ietf.org/html/rfc7643#section-4.1][SCIM "User" resource schema]].

   #+NAME: user-db-model
   #+BEGIN_SRC python :noweb yes
     class User(db.Model):
         __tablename__ = 'users'
         <<user-db-model-id-attribute>>
         <<user-db-model-active-attribute>>
         <<user-db-model-user-attributes>>

         def __init__(self, resource):
             self.update(resource)

         def update(self, resource):
             for attribute in ['userName', 'active']:
                 if attribute in resource:
                     setattr(self, attribute, resource[attribute])
             for attribute in ['givenName', 'middleName', 'familyName']:
                 if attribute in resource['name']:
                     setattr(self, attribute, resource['name'][attribute])

         def to_scim_resource(self):
             rv = {
                 "schemas": ["urn:ietf:params:scim:schemas:core:2.0:User"],
                 "id": self.id,
                 "userName": self.userName,
                 "name": {
                     "familyName": self.familyName,
                     "givenName": self.givenName,
                     "middleName": self.middleName,
                 },
                 "active": self.active,
                 "meta": {
                     "resourceType": "User",
                     "location": url_for('user_get',
                                         user_id=self.id,
                                         _external=True),
                     # "created": "2010-01-23T04:56:22Z",
                     # "lastModified": "2011-05-13T04:42:34Z",
                 }
             }
             return rv
   #+END_SRC
   
** Support for SCIM Query resources

   We also define a =ListResponse= class, which is used to return an
   array of SCIM resources into a
   [[https://tools.ietf.org/html/rfc7644#section-3.4.2][Query Resource]].

   #+NAME: list-response-class
   #+BEGIN_SRC python
     class ListResponse():
         def __init__(self, list, start_index=1, count=None, total_results=0):
             self.list = list
             self.start_index = start_index
             self.count = count
             self.total_results = total_results

         def to_scim_resource(self):
             rv = {
                 "schemas": ["urn:ietf:params:scim:api:messages:2.0:ListResponse"],
                 "totalResults": self.total_results,
                 "startIndex": self.start_index,
                 "Resources": []
             }
             resources = []
             for item in self.list:
                 resources.append(item.to_scim_resource())
             if self.count:
                 rv['itemsPerPage'] = self.count
             rv['Resources'] = resources
             return rv
   #+END_SRC

** Support for SCIM error messages

   Given a =message= and HTTP =status_code=, this will return a Flask
   response with the appropriately formatted SCIM error message.

   See [[https://tools.ietf.org/html/rfc7644#section-3.12][section 3.12]] of [[https://tools.ietf.org/html/rfc7644][RFC 7644]] for details.

   #+NAME: scim-error
   #+BEGIN_SRC python
     def scim_error(message, status_code):
         rv = {
             "schemas": ["urn:ietf:params:scim:api:messages:2.0:Error"],
             "detail": message,
             "status": str(status_code)
         }
         return flask.jsonify(rv), status_code
   #+END_SRC

** Socket.IO support

   This sample application makes use of Socket.IO to give you a "real
   time" view of SCIM requests that Okta makes to this sample
   application.

   When you load the sample application (the "/" route), your browser
   will be sent a web application that uses Socket.IO to display
   updates without the need for you to reload the page:

   #+NAME: hello-route
   #+BEGIN_SRC python
     @app.route('/')
     def hello():
         return render_template('base.html')
   #+END_SRC

   This page is updated using the functions below:

   - =send_to_browser= is syntactic sugar that will =emit= Socket.IO
     messages to the browser with the proper =broadcast= and
     =namespace= settings.
   - =render_json= is more syntactic sugar which is used to render
     JSON replies to Okta's SCIM client and =emit= the SCIM resource
     to Socket.IO at the same time.
   - =test_connect= is the function called with a browser first starts
     up Socket.IO, it returns a list of currently active users to the
     browser via Socket.IO.
   - =test_disconnect= is a stub that shows how to handle Socket.IO
     "disconnect" messages.

   The code described above is as follows:
   
   #+NAME: socket-io-support
   #+BEGIN_SRC python
     def send_to_browser(obj):
         socketio.emit('user',
                       {'data': obj},
                       broadcast=True,
                       namespace='/test')


     def render_json(obj):
         rv = obj.to_scim_resource()
         send_to_browser(rv)
         return flask.jsonify(rv)


     @socketio.on('connect', namespace='/test')
     def test_connect():
         for user in User.query.filter_by(active=True).all():
             emit('user', {'data': user.to_scim_resource()})


     @socketio.on('disconnect', namespace='/test')
     def test_disconnect():
         print('Client disconnected')
   #+END_SRC

** Socket.IO application
   Below is the JavaScript that powers the Socket.IO application
   described above. For the full contents of the HTML that this
   JavaScript is part of, see the =base.html= file in the =templates=
   directory of this project.

   #+NAME: socket-io-application
   #+BEGIN_SRC javascript
     $(document).ready(function () {
         namespace = '/test'; // change to an empty string to use the global namespace
         var uri = 'https://' + document.domain  + namespace;
         console.log(uri);
         var socket = io.connect(uri);

         socket.on('user', function(msg) {
             console.log(msg);
             var user = msg.data;
             var user_element = '#' + user.id
             var userRow = '<tr id="' + user.id + '"><td>' + user.id + '</td><td>' + user.name.givenName + '</td><td>' + user.name.familyName + '</td><td>' + user.userName + '</td></tr>';
             if($(user_element).length && user.active) {
                 $(user_element).replaceWith(userRow);
             } else if (user.active) {
                 $('#users-table').append(userRow);
             }

             if($(user_element).length && user.active) {
                 $(user_element).show();
             }
             if($(user_element).length && !user.active) {
                 $(user_element).hide();
             }
         });
     });
   #+END_SRC
** Support for running from the command line
   This bit of code allows you to run the sample application by typing
   =python scim-server.py= from your command line:
   #+NAME: run-from-command-line
   #+BEGIN_SRC python
     if __name__ == "__main__":
         app.debug = True
         socketio.run(app)
   #+END_SRC
** Dependencies
   Here is a detailed list of the dependencies that this example SCIM
   server depends on, and what each dependency does.

   #+tblname: requirements-table
   |------------------+----------+---------+------------------------------------------------------------------------+------------------------------------------------------------|
   | name             | equality | version | description                                                            | url                                                        |
   |------------------+----------+---------+------------------------------------------------------------------------+------------------------------------------------------------|
   | Flask            | >=       |  0.10.1 | A web framework built with a small core and easy-to-extend philosophy. | =http://flask.pocoo.org=                                   |
   | Flask-SQLAlchemy | >=       |     2.1 | Adds SQLAlchemy support to Flask.                                      | =https://github.com/mitsuhiko/flask-sqlalchemy=            |
   | Flask-SocketIO   | >=       |     2.1 | Socket.IO integration for Flask applications.                          | =https://github.com/miguelgrinberg/Flask-SocketIO=         |
   | gunicorn         | >=       |  19.4.5 | A pre-fork worker model HTTP server for WSGI.                          | =https://en.wikipedia.org/wiki/Gunicorn_%28HTTP_server%29= |
   | Jinja2           | >=       |     2.8 | A modern and designer-friendly templating language.                    | =http://jinja.pocoo.org/docs/dev=                          |
   | MarkupSafe       | >=       |    0.23 | A library for Python that implements a unicode string.                 | =http://www.pocoo.org/projects/markupsafe=                 |
   | SQLAlchemy       | >=       |  1.0.12 | SQL toolkit and Object Relational Mapper.                              | =https://pypi.python.org/pypi/SQLAlchemy=                  |
   | Werkzeug         | >=       |  0.11.4 | A WSGI utility library for Python.                                     | =http://werkzeug.pocoo.org=                                |
   | itsdangerous     | >=       |    0.24 | Used to send data to untrusted environments.                           | =http://pythonhosted.org/itsdangerous=                     |
   | python-engineio  | >=       |   0.8.8 | Implementation of the Engine.IO realtime server.                       | =https://github.com/miguelgrinberg/python-engineio=        |
   | python-socketio  | >=       |     1.0 | Implementation of the Socket.IO realtime server.                       | =https://github.com/miguelgrinberg/python-socketio=        |
   | six              | >=       |  1.10.0 | Python 2 and 3 compatibility library.                                  | =https://pypi.python.org/pypi/six=                         |
   | wsgiref          | >=       |   0.1.2 | Provides validation support for WSGI.                                  | =https://pypi.python.org/pypi/wsgiref=                     |
   |------------------+----------+---------+------------------------------------------------------------------------+------------------------------------------------------------|
   
   (This table is used to generate the =requirements.txt= file for this project)
*** How to turn the table above into a requirements.txt file	   :noexport:
    To turn the table above into a =requirements.txt= file, we need to
    do the following:
    1. Convert the table into an array of dictionaries.
    2. Iterate through the array of dictionaries and construct output in
       the =requirements.txt= format, the output must be annotated so
       that it is written to =requirements.txt= when =M-x
       org-bable-tangle= is run on this file.
*** Converting the table to an array of dictionaries 		   :noexport:
   The code below is taken verbatim from [[http://stackoverflow.com/a/8414248/3191847][a StackOverflow answer]] by [[http://stackoverflow.com/users/174728/john-la-rooy][John
   La Rooy]]. This code takes the table above as an array of arrays and
   returns an array of dictionaries, where the key is the column name
   and the value is the column content. This array of dictionaries is
   used below to generate the =requirements.txt= file.
   #+NAME: table-to-dict
   #+BEGIN_SRC python :var table=requirements-table :results code :cache yes
     headers = table[0]
     values = table[1:]

     from functools import partial
     from itertools import izip, imap
     data = map(dict, imap(partial(izip, headers), values))

     return data
   #+END_SRC
   #+RESULTS[a4e69db36a954654c36815962bfade1606a3dee2]: table-to-dict
   #+BEGIN_SRC python
   [{'url': '=http://flask.pocoo.org=', 'version': '0.10.1', 'equality': '>=', 'name': 'Flask', 'description': 'A web framework built with a small core and easy-to-extend philosophy.'}, {'url': '=https://github.com/mitsuhiko/flask-sqlalchemy=', 'version': 2.1, 'equality': '>=', 'name': 'Flask-SQLAlchemy', 'description': 'Adds SQLAlchemy support to Flask.'}, {'url': '=https://github.com/miguelgrinberg/Flask-SocketIO=', 'version': 2.1, 'equality': '>=', 'name': 'Flask-SocketIO', 'description': 'Socket.IO integration for Flask applications.'}, {'url': '=https://en.wikipedia.org/wiki/Gunicorn_%28HTTP_server%29=', 'version': '19.4.5', 'equality': '>=', 'name': 'gunicorn', 'description': 'A pre-fork worker model HTTP server for WSGI.'}, {'url': '=http://jinja.pocoo.org/docs/dev=', 'version': 2.8, 'equality': '>=', 'name': 'Jinja2', 'description': 'A modern and designer-friendly templating language.'}, {'url': '=http://www.pocoo.org/projects/markupsafe=', 'version': 0.23, 'equality': '>=', 'name': 'MarkupSafe', 'description': 'A library for Python that implements a unicode string.'}, {'url': '=https://pypi.python.org/pypi/SQLAlchemy=', 'version': '1.0.12', 'equality': '>=', 'name': 'SQLAlchemy', 'description': 'SQL toolkit and Object Relational Mapper.'}, {'url': '=http://werkzeug.pocoo.org=', 'version': '0.11.4', 'equality': '>=', 'name': 'Werkzeug', 'description': 'A WSGI utility library for Python.'}, {'url': '=http://pythonhosted.org/itsdangerous=', 'version': 0.24, 'equality': '>=', 'name': 'itsdangerous', 'description': 'Used to send data to untrusted environments.'}, {'url': '=https://github.com/miguelgrinberg/python-engineio=', 'version': '0.8.8', 'equality': '>=', 'name': 'python-engineio', 'description': 'Implementation of the Engine.IO realtime server.'}, {'url': '=https://github.com/miguelgrinberg/python-socketio=', 'version': 1.0, 'equality': '>=', 'name': 'python-socketio', 'description': 'Implementation of the Socket.IO realtime server.'}, {'url': '=https://pypi.python.org/pypi/six=', 'version': '1.10.0', 'equality': '>=', 'name': 'six', 'description': 'Python 2 and 3 compatibility library.'}, {'url': '=https://pypi.python.org/pypi/wsgiref=', 'version': '0.1.2', 'equality': '>=', 'name': 'wsgiref', 'description': 'Provides validation support for WSGI.'}]
   #+END_SRC
*** Creating the =requirements.txt= file			   :noexport:
   This code takes the requirements table above and turns it into a
   =requirements.txt= file that will get exported when =M-x
   org-bable-tangle= is run.

   #+HEADER: :results_switches ":tangle requirements.txt :noweb yes :exports none :padline no"
   #+BEGIN_SRC python :var table=requirements-table :results code :noweb yes :cache yes
     data = <<table-to-dict(requirements-table)>>
     output = ''
     for package in data:
	 output += "{name}{equality}{version}\n".format(**package)
     return output
   #+END_SRC

   #+RESULTS[5c405b5f5d2585aa053c21b101e02f78bede7a67]:
   #+BEGIN_SRC python :tangle requirements.txt :noweb yes :exports none :padline no
   Flask>=0.10.1
   Flask-SQLAlchemy>=2.1
   Flask-SocketIO>=2.1
   gunicorn>=19.4.5
   Jinja2>=2.8
   MarkupSafe>=0.23
   SQLAlchemy>=1.0.12
   Werkzeug>=0.11.4
   itsdangerous>=0.24
   python-engineio>=0.8.8
   python-socketio>=1.0
   six>=1.10.0
   wsgiref>=0.1.2
   #+END_SRC
* License information
  #+NAME: license
  #+BEGIN_SRC text :tangle LICENSE.txt :padline no
    Copyright © 2016, Okta, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  #+END_SRC

* Files 							   :noexport:
** scim-server.py
   #+BEGIN_SRC python :tangle scim-server.py :noweb yes :exports none :padline no
     # <<license>>
     <<imports>>


     <<setup>>


     <<list-response-class>>


     <<user-db-model>>


     <<scim-error>>


     <<socket-io-support>>


     <<hello-route>>


     <<user_get>>


     <<users_post>>


     <<users_put>>


     <<user_patch>>


     <<users_get>>

     <<run-from-command-line>>
   #+END_SRC
** templates/base.html
   #+BEGIN_SRC html :tangle templates/base.html :noweb yes :exports none :padline no
     <!DOCTYPE html>
     <html lang="en">
       <head>
         <meta charset="utf-8">
         <meta http-equiv="X-UA-Compatible" content="IE=edge">
         <meta name="viewport" content="width=device-width, initial-scale=1">
         <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
         <title>Okta SCIM Example</title>
         <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
         <!-- Bootstrap core CSS -->
         <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet" integrity="sha256-MfvZlkHCEqatNoGiOXveE8FIwMzZg4W85qfrfIFBfYc= sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous">
         <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
         <!--[if lt IE 9]>
           <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
           <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
           <![endif]-->
         <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha256-k2/8zcNbxVIh5mnQ52A0r3a6jAgMGxFJFE2707UxGCk= sha512-ZV9KawG2Legkwp3nAlxLIVFudTauWuBpC10uEafMHYL0Sarrz5A7G79kXh5+5+woxQ5HM559XX2UZjMJ36Wplg==" crossorigin="anonymous">
         <link rel="stylesheet" href="https://lipis.github.io/bootstrap-social/bootstrap-social.css">
         <!-- 60px to make the container go all the way to the bottom of the topbar -->
         <style>
           body { padding-top: 80px; }
           #okta-sign-in { margin-top: 0px; }
         </style>
       </head>
       <body id="main">
         <nav class="navbar navbar-inverse navbar-fixed-top">
           <div class="container">
             <div class="navbar-header">
               <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                 <span class="sr-only">Toggle navigation</span>
                 <span class="icon-bar"></span>
                 <span class="icon-bar"></span>
                 <span class="icon-bar"></span>
               </button>
               <a class="navbar-brand" href="#">Okta SCIM Example</a>
             </div>
             <div id="navbar" class="collapse navbar-collapse">
               <ul class="nav navbar-nav">
               </ul>
             </div><!--/.nav-collapse -->
           </div>
         </nav>
         <div class="container">
           <table class="table" id="users-table">
             <caption>SCIM Users</caption>
             <thead>
               <tr>
                 <td>#</td>
                 <td>First Name</td>
                 <td>Last Name</td>
                 <td>Username</td>
               </tr>
             </thead>
           </table>
           <div id="log">
           </div>
         </div><!-- /.container -->
         <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js"></script>
         <script type="text/javascript">
           <<socket-io-application>>
         </script>
         <!-- Placed at the end of the document so the pages load faster -->
         <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js" integrity="sha256-Sk3nkD6mLTMOF0EOpNtsIry+s1CsaqQC1rVLTAy+0yc= sha512-K1qjQ+NcF2TYO/eI3M6v8EiNYZfA95pQumfvcVrTHtwQVDG+aHRqLi/ETn2uB+1JqwYqVG3LIvdm9lj6imS/pQ==" crossorigin="anonymous"></script>
       </body>
     </html>
   #+END_SRC
** .gitignore
   #+BEGIN_SRC text :tangle .gitignore :noweb yes :exports none :padline no
     venv
     ,*.pyc
     ,*~
     .DS_Store
     .exports
   #+END_SRC
* To do 							   :noexport:
** TODO Convert example curl output to test fixtures
